/*        Hierarchy Builder: algebraic hierarchies made easy
    This software is released under the terms of the MIT license              */

% This file contains proxies for the API to write into the Coq state (eg add
% an inductive, set implicit arguments...). This has two purposes:
% - give nicer error messages
% - we want to be able to log to a file all these actions (WIP), this file is
%   were logging takes place. Hence we never call, say, coq.evn.add-* directly,
%   but always via this proxy

namespace log.coq {

pred arguments.set-implicit i:gref, i:list (list implicit_kind).
arguments.set-implicit GR I :-  std.do! [
  coq.arguments.set-implicit GR I,
].

pred env.add-const-noimplicits i:id, i:term, i:term, i:opaque?, o:constant.
env.add-const-noimplicits Name Bo Ty Opaque C :- std.do! [
  % TODO: refine when we switch to add-section-variable/add-const
  if (not(ground_term Ty ; ground_term Bo))
    (coq.error "HB: cannot infer some information in" Name
               ":" {coq.term->string Ty} ":=" {coq.term->string Bo})
    true,
  coq.env.add-const Name Bo Ty Opaque C,
  % if (var Ty) (Ty? = none) (Ty? = some Ty),
  @local! => arguments.set-implicit (const C) [[]],
].

pred env.add-section-variable-noimplicits i:id, i:term, o:constant.
env.add-section-variable-noimplicits Name Ty C :- std.do! [
  if (Name = "_") (ID is "fresh_name_" ^ {std.any->string {new_int}}) (ID = Name),
  % coq.env.add-section-variable ID Ty C, coq-elpi >= 1.9.x
  @local! => coq.env.add-const ID _ Ty @opaque! C,
  @local! => arguments.set-implicit (const C) [[]],
].

pred env.add-indt i:indt-decl, o:inductive.
env.add-indt Decl I :- std.do! [
  if (not(coq.ground-indt-decl? Decl))
    (coq.error "HB: cannot infer some information in" {coq.indt-decl->string Decl})
    true,
  coq.env.add-indt Decl I,
].

pred env.begin-module i:id.
env.begin-module Name :- std.do! [
  coq.env.begin-module Name none,
].

pred env.end-module-name i:id, o:modpath.
env.end-module-name _ M :- std.do! [
  coq.env.end-module M,
].

pred env.begin-section i:id.
env.begin-section Name :- std.do! [
  coq.env.begin-section Name,
].

pred env.end-section-name i:id.
env.end-section-name _ :- std.do! [
  coq.env.end-section,
].

pred notation.add-abbreviation i:id, i:int, i:term, i:bool, o:abbreviation.
notation.add-abbreviation Name NArgs Body OnlyParsing O :- std.do! [
  coq.notation.add-abbreviation Name NArgs Body OnlyParsing O,
].

pred env.export-module i:modpath.
env.export-module M :- std.do! [
  coq.env.export-module M,
].

pred env.import-module i:modpath.
env.import-module M :- std.do! [
  coq.env.import-module M,
].

pred coercion.declare i:coercion.
coercion.declare C :- std.do! [
  @global! => coq.coercion.declare C,
].

}

% Since CS.foo is not a valid predicate name we can't use it
% in the namespace, so we just define it here with the full name
pred log.coq.CS.declare-instance i:gref.
log.coq.CS.declare-instance GR  :- std.do! [
  coq.CS.declare-instance GR,
].

% Since "accumulate" is a keyword we can't use it as a predicate name
% in the namespace, so we just define it here with the full name
pred log.coq.env.accumulate i:scope, i:string, i:clause.
log.coq.env.accumulate S DB CL :- std.do! [
  coq.elpi.accumulate S DB CL,
].
